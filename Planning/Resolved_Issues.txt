// ISSUES: 
    // Error: Requesting main frame too early!
        // Seems to happen arbitrarily, just rerun
    // Everything is extremely slow and prone to errors as a result
        // Minimize repeated work (particularly at the bottleneck of scraping) and cache results to load more quickly
    // Nothing showing up in json
        // Make sure to await any promises
    // Addition of numbers causes string concatenation
        // +a + +b
        // dumb, ik
    // Not able to puppeteer
        // You need to make a new browser and/or page instance between page.goto uses
    // JS sets and maps are jank
        // Don't use them, and always make sure to use strict equality
    // Not able to send a body to the backend
        // You can't do this with get or head requests
    // Everything is broken upon refactor and takes forever to fix
        // Test functionality incrementally (akin to test-driven development), whether from the bottom up while implementing or from the top downwards afterwards
    // Bunch of %20s in api call
        // Don't put newlines, even if it looks better, the url string
    // How do I access the info stored in a result object?
        // Object.entries
    // In MIP hell
        // Formulation is king
            // And since I'm not good at it, Google's Stigler representation might as well be an anchor
        // The key to escaping is not trying to set solely an upper or lower bound, nor is it cleverly algebra-ing in ratio constraints
            // Also, it looks like I need to make sure that the objective has corresponding information (fat if fat is objective) to the constraints
                // Makes sense, how else would it know about the problem
        // Just account for the real fuzziness of the protein, fat, and carb translation to calories by having a nice fat double bound confidence interval around the expected value
        // This is getting into the realm of superstition, but maybe the success had to do with the fact that I changed everything to the same units
            // https://or.stackexchange.com/questions/8049/detect-numerical-instability-with-large-scale-optimization-problems
                // In general, I think it is difficult if not impossible to look at a model and say, prior to any computations, that it is going to be unstable ... with one exception. If the largest and smallest absolute values of nonzero constraint coefficients differ by too many orders of magnitude, then you are living dangerously. The model might still be stable, but a wide range of coefficient magnitudes raises the likelihood of instability. Looking at the objective coefficients, I don't know that a wide range of magnitudes would signal likely instability in the sense of basis matrices having large condition numbers, but it could signal potential rounding problems that might lead to suboptimal solutions. Some solvers provide an easy means to inspect the range of magnitudes.
            // It just seems like these problems are bullshit and you have to trial-and-error your way through
                // https://or.stackexchange.com/questions/834/best-practices-for-formulating-mips
                // Either that or painfully math: https://orinanobworld.blogspot.com/2010/08/ill-conditioned-bases-and-numerical.html
                    // https://or.stackexchange.com/questions/135/what-is-the-big-m-method-and-are-there-two-of-them
                    // https://orinanobworld.blogspot.com/2011/07/perils-of-big-m.html
                    // Or money: https://or.stackexchange.com/questions/8049/detect-numerical-instability-with-large-scale-optimization-problems
                        // Require tech support: https://support.gurobi.com/hc/en-us/community/posts/360050541152-High-instability-of-an-MIP-
    // Can't get protein, carbohydrates, and fats to play well together
        // If I get desperate enough, I can revert to java alg
        // Either that or https://docs.mosek.com/modeling-cookbook/mio.html
            // The cookbook recommended on https://developers.google.com/optimization/mip
        // SOLUTION: Check your math, don't multiply where you should divide, vice versa
    // I got protein, carbohydrates, and fats to play well together, but now it never converges
        // Go to linear programming, and just ceiling after setting a caloric threshold below what works
        // Tested: 0.9*calories upper bound, 2 duplicates at most for each
            // Works within about 100 calories for meals between 500 and 1500 calories
        // It seems there's no free lunch with this linear programming/optimization business
            // But by staring at the things that are annoying for long enough and coming up with an opposing constraint/objective, you can actually solve things
                // Like, despite it being likely an artefact of the data, only upper bounding fat and iteratively widening the allowance until success for the best possible answer
    // Requiring not working
        // I had to set the quantity to 1 by default
    // PayloadTooLargeError
        // Okay, so a band-aid is 
            /**app.use(myParser.json({limit: '200mb'}));
               app.use(myParser.urlencoded({limit: '200mb', extended: true})); */
            // But the real solution could be modifying the way I'm posting and responding with the entire meals
            // To instead use a date sent and an id in lieu of the massive food object, and then just picking up the relevant menu from save file
                // I don't actually have to do that, I just thought of it and that should be fine for this case
    // Circular reference error when writing object to json
        // It's not js magic, I actually just had a jank line where I set the id parameter of an object to itself
    // Should I ban foods for veg/vegan through the front or the back end?
        // Front end, because people may have carry-over sessions from previous days and this way we don't have to have the food data for every possible day on the back end
    // Brunch not loading
        // use datetime.weekday and check for 6 (brunch only) and 7 (brunch and dinner)
    // Cannot use Tedious upload and File Write at the same time
        // Just use tedious, I'm transitioning away from .json
        // Use as few connections as possible, 2,000 was overloading the network with what could be done with one bulkload
            // Kind of like the n+1 problem
    // Cannot do bulk load with TDS; keep getting colid error
        // Googling: Copied others' functioning code
        // Trial and Error: Realized I had a AddColumn marked as nullable when it wasn't; make sure to check the right sql file
    // Keeps skipping async code I'm awaiting
        // If you got results depending on results, then that's that you need to trace execution and understand why it's speedrunning your code
            // A pattern I found useful is to do a promise on the done event instead of a callback for each of the individual rows
                // With promises we want it to await the last possible thing so it skips none of the results. We need to have a reference to this thing in the code
                    // This is not the row events themselves, but the done at the end (doneProc, doneInProc, or done; somehow all three have a chance of returning the final tally of rows [first or at all])
    // The server can be crashed by a failed sql connection
        // Use try catches around all endpoints, sending back a 500 internal server error
    // Keep getting undefined while iterating through keys?
        // Iterating through Object.keys() returns indices, you still need to index in afterwards
    // After using case statements thong that weren't null now are?
        // Before closing the case expression with end, the optional else clause can be used. The <result> of else is used if no <condition> is true.1 If else is omitted, else null is implicit.2
    // Decimal in sproc always rounds (in sql even)
        // Convert it to float, that worked before